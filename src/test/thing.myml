let type Eq =
TRec Eq (a::*) :: * =>
Typecase a of
| int => int
| bool => bool
| str => str
| s -> t => void
| s * t => (Eq [s]) * (Eq [t])
| list s => list (Eq [s])
end
in
let not (b:bool) : bool = if b then false else true in
(trec eq (a::*) : Eq [a] -> Eq [a] -> bool =>
typecase [TFun (t::*) => t -> t -> bool] (Eq [a]) of
| int => (fun (x:int) (y:int) => x == y)
| bool => (fun (x:bool) (y:bool) => (x && y) || ((not x) && (not y)))
| str => (fun (x:str) (y:str) => false)
| s -> t => (fun (x:s->t) (y:s->t) => false)
| s * t => (fun (x:s*t) (y:s*t) =>
              (eq [Eq [s]] (fst x) (fst y)) &&
	      (eq [Eq [t]] (snd x) (snd y)))
| list s => (fun (x:list s) (y:list s) => false)
end)
