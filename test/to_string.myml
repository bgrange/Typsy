let rec int_to_string (n:int) : str =
  if n == 0 then "0"
  else if n == 1 then "1"
  else if n == 2 then "2"
  else if n == 3 then "3"
  else if n == 4 then "4"
  else if n == 5 then "5"
  else if n == 6 then "6"
  else if n == 7 then "7"
  else if n == 8 then "8"
  else if n == 9 then "9"
  else
    (int_to_string (n / 10)) ++ (int_to_string (n % 10))
in
let bool_to_string (b:bool) : str =
  if b then "true" else "false"
in
let to_string : (forall a. a -> str) =
 trec aux a : a -> str =>
 typecase [d.d -> str] a of
 | int => int_to_string
 | bool => bool_to_string
 | str => (fun (s:str) => s)
 | b -> c => (fun (f: b -> c) => "<function>")
 | b * c => (fun (p: b * c) => "(" ++ (aux [b] (fst p)) ++ "," ++ (aux [c] (snd p)) ++ ")")
 | list b => (fun (l:list b) => "list")
 end
in
to_string [(int * bool) * str] (((2 + 34),(true && false)),("cock" ++ " semen"))

  
